/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.nationalinsurance.gui;

import com.nationalinsurance.beans.FormulaBean;
import com.nationalinsurance.beans.ItemBean;
import com.nationalinsurance.database.ItemManager;
import com.nationalinsurance.services.DefinationService;
import com.nationalinsurance.services.FormulaDefination;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

//for the Formula text coloring
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Ronzeyt
 */
public class DefinationGUI extends javax.swing.JPanel {
    private CardLayoutInterface cardlayout;       private String type;    //data type in item defination section
    private String statusMessage;
    private ArrayList<String> itemUID;  //this attribute stores list of items UID.  used while checking formula on runtime
    private ArrayList<String> itemCalculateType;
    private ArrayList<String> itemFormulateType;
    private String textAreaformula;   //this attribute is used to store the text area formula steps as a previous hold in order to compare new text. if same then no uppercase update.(useful to avoid arrow button work and other non text inputs) used in checkFormula() function
    
    //used in formulaValidate function
    private ArrayList<String> calculate_UidList;
    private ArrayList<String> input_UidList;
    
    /**
     * Creates new form DefinationGUI
     * @param cardlayout
     */
    public DefinationGUI(CardLayoutInterface cardlayout) {
        initComponents();
        this.cardlayout = cardlayout;
        AddFormulaButton.setEnabled(false);
        textAreaformula = "";
        FormulaEditorPane.setFocusable(false);
        FormulaEditorPane.setToolTipText("Select Formulate Item First to enter Formula steps");
        FormulaEditorPane.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        
        //getting UID Lists which can be used in formula text area while adding new formula
        DefinationService service = new DefinationService();
        itemUID = service.getUIDList();
        
        //instantiating input and calculate uid lists
        calculate_UidList = service.getCalculateUIDList();
        input_UidList = service.getInputUIDList();
        
        itemCalculateType = service.getCalculateUIDList();
        itemFormulateType = service.getFormulateUIDList();
        
        //setting items list in the referencelist panel.
        referenceList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ItemDefinePanel = new javax.swing.JPanel();
        NameLabel = new javax.swing.JLabel();
        NameTextField = new javax.swing.JTextField();
        UidLabel = new javax.swing.JLabel();
        DataTypeTextField = new javax.swing.JLabel();
        UidTextField = new javax.swing.JTextField();
        AddItemButton = new javax.swing.JButton();
        AddItemReset = new javax.swing.JButton();
        DataTypePanel = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        FormulaDefinePanel = new javax.swing.JPanel();
        FormulateItemLabel = new javax.swing.JLabel();
        FormulateItemChoice = new java.awt.Choice();
        AddFormulaButton = new javax.swing.JButton();
        FormulaResetButton = new javax.swing.JButton();
        FormulaDescriptionLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        FormulaEditorPane = new javax.swing.JTextPane();
        FormulaStatusPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        FormulaStatusDetailPane = new javax.swing.JTextPane();
        InputStatus = new javax.swing.JLabel();
        FormulaStatusField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ReferenceList = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        StatusPanel = new javax.swing.JPanel();
        ScrollPane1 = new javax.swing.JScrollPane();
        statusBarjTextArea = new javax.swing.JTextArea();
        ProgressBar = new javax.swing.JProgressBar();
        StatusClear = new javax.swing.JButton();
        LowerViewPanel = new javax.swing.JPanel();
        ViewDefinedItems = new javax.swing.JButton();
        ViewDefinedFormula = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(860, 520));

        ItemDefinePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Item Defination", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 12))); // NOI18N

        NameLabel.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        NameLabel.setForeground(new java.awt.Color(0, 153, 0));
        NameLabel.setText("Name:");
        NameLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        NameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameTextFieldActionPerformed(evt);
            }
        });
        NameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                NameTextFieldKeyReleased(evt);
            }
        });

        UidLabel.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        UidLabel.setForeground(new java.awt.Color(0, 153, 0));
        UidLabel.setText("UID:");

        DataTypeTextField.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        DataTypeTextField.setForeground(new java.awt.Color(0, 153, 0));
        DataTypeTextField.setText("Data Type:");

        UidTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UidTextFieldActionPerformed(evt);
            }
        });
        UidTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                UidTextFieldKeyReleased(evt);
            }
        });

        AddItemButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        AddItemButton.setText("Add Item");
        AddItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItemButtonActionPerformed(evt);
            }
        });

        AddItemReset.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        AddItemReset.setText("Reset");
        AddItemReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItemResetActionPerformed(evt);
            }
        });

        DataTypePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jRadioButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jRadioButton1.setForeground(new java.awt.Color(51, 0, 255));
        jRadioButton1.setText("User Input");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jRadioButton2.setForeground(new java.awt.Color(51, 0, 255));
        jRadioButton2.setText("Calculate");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jRadioButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jRadioButton3.setForeground(new java.awt.Color(51, 0, 255));
        jRadioButton3.setText("Formulate");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DataTypePanelLayout = new javax.swing.GroupLayout(DataTypePanel);
        DataTypePanel.setLayout(DataTypePanelLayout);
        DataTypePanelLayout.setHorizontalGroup(
            DataTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DataTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DataTypePanelLayout.setVerticalGroup(
            DataTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DataTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jRadioButton1)
                .addComponent(jRadioButton2)
                .addComponent(jRadioButton3))
        );

        javax.swing.GroupLayout ItemDefinePanelLayout = new javax.swing.GroupLayout(ItemDefinePanel);
        ItemDefinePanel.setLayout(ItemDefinePanelLayout);
        ItemDefinePanelLayout.setHorizontalGroup(
            ItemDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ItemDefinePanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(ItemDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ItemDefinePanelLayout.createSequentialGroup()
                        .addComponent(DataTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(ItemDefinePanelLayout.createSequentialGroup()
                        .addGroup(ItemDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DataTypePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(ItemDefinePanelLayout.createSequentialGroup()
                                .addComponent(AddItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AddItemReset, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(ItemDefinePanelLayout.createSequentialGroup()
                                .addGroup(ItemDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(UidLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ItemDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NameTextField)
                                    .addComponent(UidTextField))))
                        .addGap(24, 24, 24))))
        );
        ItemDefinePanelLayout.setVerticalGroup(
            ItemDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ItemDefinePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ItemDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameLabel)
                    .addComponent(NameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ItemDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UidLabel)
                    .addComponent(UidTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DataTypeTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DataTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ItemDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddItemReset)
                    .addComponent(AddItemButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        FormulaDefinePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Formula Defination", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 12))); // NOI18N

        FormulateItemLabel.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        FormulateItemLabel.setForeground(new java.awt.Color(0, 153, 0));
        FormulateItemLabel.setText("Formulate Item:");

        FormulateItemChoice.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        FormulateItemChoice.add("--Select--");
        FormulateItemChoice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                FormulateItemChoiceMousePressed(evt);
            }
        });
        FormulateItemChoice.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                FormulateItemChoiceItemStateChanged(evt);
            }
        });
        FormulateItemChoice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                FormulateItemChoiceFocusLost(evt);
            }
        });

        AddFormulaButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        AddFormulaButton.setText("Add Formula");
        AddFormulaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddFormulaButtonActionPerformed(evt);
            }
        });

        FormulaResetButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        FormulaResetButton.setText("Reset");
        FormulaResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FormulaResetButtonActionPerformed(evt);
            }
        });

        FormulaDescriptionLabel.setText("Please specify or edit the formula steps for the selected item:");

        FormulaEditorPane.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        FormulaEditorPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FormulaEditorPaneMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                FormulaEditorPaneMouseEntered(evt);
            }
        });
        FormulaEditorPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                FormulaEditorPaneKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(FormulaEditorPane);
        document = FormulaEditorPane.getStyledDocument();
        style = FormulaEditorPane.addStyle("Style", null);

        FormulaStatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        FormulaStatusDetailPane.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        FormulaStatusDetailPane.setForeground(new java.awt.Color(102, 102, 102));
        FormulaStatusDetailPane.setFocusable(false);
        jScrollPane2.setViewportView(FormulaStatusDetailPane);

        InputStatus.setBackground(new java.awt.Color(255, 255, 255));
        InputStatus.setText("Input Status:");

        FormulaStatusField.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        FormulaStatusField.setFocusable(false);
        FormulaStatusField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FormulaStatusFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FormulaStatusPanelLayout = new javax.swing.GroupLayout(FormulaStatusPanel);
        FormulaStatusPanel.setLayout(FormulaStatusPanelLayout);
        FormulaStatusPanelLayout.setHorizontalGroup(
            FormulaStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FormulaStatusPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(InputStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FormulaStatusField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane2)
        );
        FormulaStatusPanelLayout.setVerticalGroup(
            FormulaStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FormulaStatusPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(FormulaStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FormulaStatusField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InputStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBackground(new java.awt.Color(0, 0, 204));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 17, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 17, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Type:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Input");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("|");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Calculate");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        jLabel4.setText("Available items to choose for formula setup:");

        ReferenceList.setEditable(false);
        jScrollPane1.setViewportView(ReferenceList);
        document1 = ReferenceList.getStyledDocument();
        style1 = ReferenceList.addStyle("Style", null);

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel1.setText("(Item Reference List)");

        javax.swing.GroupLayout FormulaDefinePanelLayout = new javax.swing.GroupLayout(FormulaDefinePanel);
        FormulaDefinePanel.setLayout(FormulaDefinePanelLayout);
        FormulaDefinePanelLayout.setHorizontalGroup(
            FormulaDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(FormulaDefinePanelLayout.createSequentialGroup()
                .addGroup(FormulaDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FormulaDefinePanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(FormulaDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FormulaDefinePanelLayout.createSequentialGroup()
                                .addComponent(FormulateItemLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FormulateItemChoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(FormulaDescriptionLabel)))
                    .addGroup(FormulaDefinePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3))
                    .addGroup(FormulaDefinePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(FormulaDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FormulaDefinePanelLayout.createSequentialGroup()
                                .addComponent(AddFormulaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FormulaResetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(FormulaStatusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FormulaDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FormulaDefinePanelLayout.createSequentialGroup()
                        .addGroup(FormulaDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FormulaDefinePanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(58, 58, 58))))
        );
        FormulaDefinePanelLayout.setVerticalGroup(
            FormulaDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FormulaDefinePanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(FormulaDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(FormulateItemChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FormulateItemLabel)
                    .addComponent(jLabel4))
                .addGap(2, 2, 2)
                .addGroup(FormulaDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(FormulaDescriptionLabel)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(FormulaDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FormulaDefinePanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FormulaStatusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FormulaDefinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FormulaResetButton)
                    .addComponent(AddFormulaButton)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        DefinationService service = new DefinationService();
        ArrayList<String> f_List = new ArrayList<>();
        f_List = service.getFormulateItemLists();

        for (String name : f_List) {
            FormulateItemChoice.add(name);
        }

        StatusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)), "Status Bar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 12))); // NOI18N

        statusBarjTextArea.setEditable(false);
        statusBarjTextArea.setColumns(20);
        statusBarjTextArea.setFont(new java.awt.Font("Miriam Fixed", 0, 13)); // NOI18N
        statusBarjTextArea.setForeground(new java.awt.Color(255, 0, 0));
        statusBarjTextArea.setRows(5);
        ScrollPane1.setViewportView(statusBarjTextArea);

        ProgressBar.setBackground(new java.awt.Color(255, 255, 255));
        ProgressBar.setForeground(new java.awt.Color(0, 204, 51));

        StatusClear.setText("Clear");
        StatusClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout StatusPanelLayout = new javax.swing.GroupLayout(StatusPanel);
        StatusPanel.setLayout(StatusPanelLayout);
        StatusPanelLayout.setHorizontalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusPanelLayout.createSequentialGroup()
                .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(StatusClear))
            .addComponent(ScrollPane1)
        );
        StatusPanelLayout.setVerticalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StatusPanelLayout.createSequentialGroup()
                .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StatusClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );

        LowerViewPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        ViewDefinedItems.setBackground(new java.awt.Color(255, 255, 255));
        ViewDefinedItems.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        ViewDefinedItems.setText("View Defined Items");
        ViewDefinedItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewDefinedItemsActionPerformed(evt);
            }
        });

        ViewDefinedFormula.setBackground(new java.awt.Color(255, 255, 255));
        ViewDefinedFormula.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        ViewDefinedFormula.setText("View Defined Formulas");
        ViewDefinedFormula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewDefinedFormulaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LowerViewPanelLayout = new javax.swing.GroupLayout(LowerViewPanel);
        LowerViewPanel.setLayout(LowerViewPanelLayout);
        LowerViewPanelLayout.setHorizontalGroup(
            LowerViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LowerViewPanelLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(LowerViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ViewDefinedItems, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ViewDefinedFormula, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        LowerViewPanelLayout.setVerticalGroup(
            LowerViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LowerViewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ViewDefinedItems, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ViewDefinedFormula, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LowerViewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(StatusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ItemDefinePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FormulaDefinePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ItemDefinePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StatusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(FormulaDefinePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LowerViewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void NameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NameTextFieldActionPerformed

    private void UidTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UidTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UidTextFieldActionPerformed

    private void AddItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItemButtonActionPerformed
        // TODO add your handling code here
        System.out.println("DefinationGUI:: AddItemButtonActionPerformed: setting button disabled");
        AddItemButton.setEnabled(false); 
        System.out.println("Add item button clicked");
        this.submitItemValue();        
    }//GEN-LAST:event_AddItemButtonActionPerformed

    private void AddItemResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItemResetActionPerformed
        // TODO add your handling code here:
        NameTextField.setText("");
        UidTextField.setText("");
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);
    }//GEN-LAST:event_AddItemResetActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        if (jRadioButton2.isSelected() || jRadioButton3.isSelected()){
            jRadioButton2.setSelected(false);
            jRadioButton3.setSelected(false);
        }
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        if (jRadioButton1.isSelected() || jRadioButton3.isSelected()){
            jRadioButton1.setSelected(false);
            jRadioButton3.setSelected(false);
        }
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
        if (jRadioButton1.isSelected() || jRadioButton2.isSelected()){
            jRadioButton1.setSelected(false);
            jRadioButton2.setSelected(false);
        }
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void ViewDefinedItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewDefinedItemsActionPerformed
        // TODO add your handling code here:
        cardlayout.setBackButtonValue("definationCard");
        cardlayout.show("listItemCard");
    }//GEN-LAST:event_ViewDefinedItemsActionPerformed

    private void ViewDefinedFormulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewDefinedFormulaActionPerformed
        // TODO add your handling code here:
        cardlayout.setBackButtonValue("definationCard");
        cardlayout.show("listFormulaCard");
    }//GEN-LAST:event_ViewDefinedFormulaActionPerformed

    private void StatusClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusClearActionPerformed
        // TODO add your handling code here:
        statusBarjTextArea.setText("");
        ProgressBar.setValue(0);
    }//GEN-LAST:event_StatusClearActionPerformed

    private void UidTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UidTextFieldKeyReleased
        // TODO add your handling code here:
        UidTextField.setText(UidTextField.getText().toUpperCase());
    }//GEN-LAST:event_UidTextFieldKeyReleased
    
    //this event format the item add inputs
    private void NameTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NameTextFieldKeyReleased
        // TODO add your handling code here:
        String text = NameTextField.getText().replace(" ", "=#");
        String[] words = text.split("#");
        String newText = "";
        for(int i=0; i<words.length;i++){
            char first_Letter = words[i].charAt(0);
            String cap = String.valueOf(first_Letter).toUpperCase();
            StringBuilder builder = new StringBuilder(words[i]);
            builder.replace(0, 1, cap);
            newText = newText.concat(builder.toString());
        }
        newText = newText.replace("=", " ");
        //newText = newText.trim();
        NameTextField.setText(newText);
    }//GEN-LAST:event_NameTextFieldKeyReleased

    private void FormulaStatusFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FormulaStatusFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FormulaStatusFieldActionPerformed

    private void FormulaEditorPaneKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FormulaEditorPaneKeyReleased
        // TODO add your handling code here:
        //validateFormula();
        formatFormula();
        validateFormula();
        checkFormulaItemValidity();
    }//GEN-LAST:event_FormulaEditorPaneKeyReleased

    private void FormulaResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FormulaResetButtonActionPerformed
        // TODO add your handling code here:
        //formulateItemChoice.set
        FormulaEditorPane.setText("");
        FormulaEditorPane.setEnabled(false);
        FormulateItemChoice.select(0);
        FormulateItemChoice.setForeground(Color.black);
        AddFormulaButton.setEnabled(false);
        setFormulaStatusDetailMessage("");
    }//GEN-LAST:event_FormulaResetButtonActionPerformed

    private void AddFormulaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddFormulaButtonActionPerformed
        // TODO add your handling code here:
        AddFormulaButton.setEnabled(false);
        this.addFormula();

    }//GEN-LAST:event_AddFormulaButtonActionPerformed

    private void FormulateItemChoiceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FormulateItemChoiceFocusLost
        // TODO add your handling code here:
        if(FormulateItemChoice.getSelectedItem().contains("Undefined")){
            FormulateItemChoice.setForeground(Color.red);
        }
        else{
            FormulateItemChoice.setForeground(Color.magenta);
        }
    }//GEN-LAST:event_FormulateItemChoiceFocusLost

    private void FormulateItemChoiceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_FormulateItemChoiceItemStateChanged
        // TODO add your handling code here:
        if (FormulateItemChoice.getSelectedItem().equals("--Select--")){
            AddFormulaButton.setEnabled(false);
            FormulaEditorPane.setFocusable(false);
        }
        else{
            AddFormulaButton.setEnabled(true);
            FormulaEditorPane.setFocusable(true);
            FormulaEditorPane.setToolTipText("");
            FormulaEditorPane.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

            if(!FormulateItemChoice.getSelectedItem().contains("Undefined")){
                int indexofSlash = FormulateItemChoice.getSelectedItem().indexOf("/");
                String uid = FormulateItemChoice.getSelectedItem().substring(indexofSlash+1);

                //getting the formula lists and setting to the editor
                DefinationService def = new DefinationService();
                ArrayList<String> list = new ArrayList<>();
                list = def.getFormulaSteps(uid);
                String editorText = "";
                for(String value:list){
                    editorText = editorText.concat(value+"\n");
                }
                editorText = editorText.replace(",", "=");
                editorText = editorText.replace("[", "");
                editorText = editorText.replace("]", "");
                editorText = editorText.replace(" ", "");
                FormulaEditorPane.setText(editorText);

                //changing the button name to update
                AddFormulaButton.setText("  Update   ");

                checkFormulaItemValidity();
            }
            else{
                FormulaEditorPane.setText("");
                //changing the button name to Add Formula
                AddFormulaButton.setText("Add Formula");
                //AddFormulaButton.revalidate();
                //AddFormulaButton.repaint();
            }
        }
    }//GEN-LAST:event_FormulateItemChoiceItemStateChanged

    //this event is for changing the color of list to black when list is displayed
    private void FormulateItemChoiceMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FormulateItemChoiceMousePressed
        // TODO add your handling code here:
        FormulateItemChoice.setForeground(Color.black);
    }//GEN-LAST:event_FormulateItemChoiceMousePressed

    private void FormulaEditorPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FormulaEditorPaneMouseClicked
        // this event checks the validity as well. similar to key event.
        checkFormulaItemValidity();
    }//GEN-LAST:event_FormulaEditorPaneMouseClicked

    private void FormulaEditorPaneMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FormulaEditorPaneMouseEntered

    }//GEN-LAST:event_FormulaEditorPaneMouseEntered


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddFormulaButton;
    private javax.swing.JButton AddItemButton;
    private javax.swing.JButton AddItemReset;
    private javax.swing.JPanel DataTypePanel;
    private javax.swing.JLabel DataTypeTextField;
    private javax.swing.JPanel FormulaDefinePanel;
    private javax.swing.JLabel FormulaDescriptionLabel;
    private javax.swing.JTextPane FormulaEditorPane;
    private Style style;
    private StyledDocument document;
    private javax.swing.JButton FormulaResetButton;
    private javax.swing.JTextPane FormulaStatusDetailPane;
    private javax.swing.JTextField FormulaStatusField;
    private javax.swing.JPanel FormulaStatusPanel;
    private java.awt.Choice FormulateItemChoice;
    private javax.swing.JLabel FormulateItemLabel;
    private javax.swing.JLabel InputStatus;
    private javax.swing.JPanel ItemDefinePanel;
    private javax.swing.JPanel LowerViewPanel;
    private javax.swing.JLabel NameLabel;
    private javax.swing.JTextField NameTextField;
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JTextPane ReferenceList;
    private Style style1;
    private StyledDocument document1;
    private javax.swing.JScrollPane ScrollPane1;
    private javax.swing.JButton StatusClear;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JLabel UidLabel;
    private javax.swing.JTextField UidTextField;
    private javax.swing.JButton ViewDefinedFormula;
    private javax.swing.JButton ViewDefinedItems;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea statusBarjTextArea;
    // End of variables declaration//GEN-END:variables

    //This method gets the selected value of data type (radio button)
    public String getType(){
        if (jRadioButton1.isSelected()){
            type = "i";
        }
        else if (jRadioButton2.isSelected()){
            type = "c";
        }
        else if (jRadioButton3.isSelected()){
            type = "f";
        }
        else {
            type= "";
        }
        return type;
    }

    //this method get the all textfield value of item defination panel and call service method to store it.
    public void submitItemValue(){  
        System.out.println("DefinationGUI Class:: submitItemValue: starting to submit and add item values");
        this.viewBar();
        String name = NameTextField.getText();
        String uid = UidTextField.getText().toUpperCase();
        String type = this.getType();
        
        //System.out.println(name+uid+type);
        ItemBean item = new ItemBean();
        item.setName(name);
        item.setUid(uid);
        item.setDataType(type);
        
        DefinationService defService = new DefinationService();
        defService.addItem(item);
        this.setStatusMessage(defService.displayMessage());
       // statusBarjTextArea.append(defService.displayMessage()+"\n");   
        
    }
    
    //This method add the formula to the database
    public void addFormula(){
        String rawUid = FormulateItemChoice.getSelectedItem().replace(" ", "");
        this.viewBar();
        String formula = FormulaEditorPane.getText();
        formula = formula.replace(" ","");
        String[] formulaList = formula.split("\\n");
        
        ArrayList<String> list = new ArrayList<>();
        ArrayList<String> returnUid = new ArrayList<>();        
        
        if (!FormulaEditorPane.getText().equals("") && FormulateItemChoice.getSelectedIndex()!=0){ 
            //getting list of return item uid
            for (int i=0;i<formulaList.length; i++){
                System.out.println(formulaList[i]+"\n");
                int index = formulaList[i].indexOf("=");
                String fml = formulaList[i].substring(index+1);                
                list.add(fml);                
                String[] uidlist = formulaList[i].split("([\\+\\*%/=-]+)");
                returnUid.add(uidlist[0]);                
            }
            
            //getting item uid from the formulaEditorPane
            int index1 = 0;
            int index2 = 0;
            String uid = "";
            if(rawUid.contains("Undefined")){
                //if the item is newly defined. then the item will be added to the database
                index1 = rawUid.indexOf("/");
                index2 = rawUid.indexOf("(");
                uid = rawUid.substring(index1+1, index2);                

                FormulaDefination formulaDefination = new FormulaDefination();
                formulaDefination.addFormula(list, uid, returnUid);
                this.setStatusMessage(formulaDefination.displayMessage()); 
            }
            else{
                //if the formula already added then it will be updated
                index1 = rawUid.indexOf("/");
                uid = rawUid.substring(index1+1); 
               
                FormulaDefination formulaDefination = new FormulaDefination();
                formulaDefination.updateFormula(list, uid, returnUid);
                this.setStatusMessage(formulaDefination.displayMessage()); 
            }            
        }
        else if(FormulateItemChoice.getSelectedIndex()==0){
            FormulaDefination formulaDefination = new FormulaDefination();
            formulaDefination.setStatusMessage("Error! Please select formulate item from the choicelist.");
            this.setStatusMessage(formulaDefination.displayMessage());
        }
        else{
            FormulaDefination formulaDefination = new FormulaDefination();
            formulaDefination.setStatusMessage("Error! Please, define formula Steps.");
            this.setStatusMessage(formulaDefination.displayMessage());
        }
    }
    
    //This method validates the formula steps.
    public void validateFormulaSteps(){
        
    }
     
    //this function returns the timer of status bar
     public javax.swing.Timer getStatusBarTimer(){
         System.out.println("DefinationGUI Class:: getStatusBarTimer: getting timer for status bar");
        int timerDelay = 2;
        javax.swing.Timer statusBarTimer = new javax.swing.Timer(timerDelay , new java.awt.event.ActionListener() {
           private int index = 0;
           private int maxIndex = 100;
           public void actionPerformed(java.awt.event.ActionEvent e) {
                if (index < maxIndex) {
                   ProgressBar.setValue(index);
                   index++;
                } 
                else {
                   ProgressBar.setValue(maxIndex);
                   ((javax.swing.Timer)e.getSource()).stop(); // stop the timer 
                   System.out.println("DefinationGUI:: getStatusBarTimer: setting button enable");
                   
                   if(!AddItemButton.isEnabled()){
                        AddItemButton.setEnabled(true);
                        statusBarjTextArea.append(statusMessage+"\n");
                        
                        //updating the reference lists as well
                        referenceList();

                        System.out.println("DefinationGUI Class:: getStatusBarTimer: ItemAdd: updating choice list");
                        if (statusMessage!="ERROR: Name/UID already exist."){      //avoiding adding choice list of already exist item while adding
                           updateChoiceList();
                        }
                    }
                   else if (!AddFormulaButton.isEnabled()){
                        AddFormulaButton.setEnabled(true);
                        statusBarjTextArea.append(statusMessage+"\n");
                        int current_Choice = FormulateItemChoice.getSelectedIndex();
                        System.out.println("DefinationGUI Class:: getStatusBarTimer: formula: updating choice list");
                        if (statusMessage!="Error! Formula Already added for selected Item."){      //avoiding adding choice list of already exist item while adding
                           updateChoiceList();
                        }                           
                        FormulateItemChoice.select(current_Choice);
                   }
                }
           }
        });
        System.out.println("DefinationGUI Class:: getStatusBarTimer: returning statusBar timer");
        return statusBarTimer;
    }
        
    //This function displays the status bar
    public void viewBar() {
        System.out.println("DefinationGUI Class:: ViewBar: getting bar for status bar");
    ProgressBar.setStringPainted(false);
    ProgressBar.setValue(0);
    javax.swing.Timer statusBarTimer = this.getStatusBarTimer();
    statusBarTimer.start();
    }
    
    //This method sets the status message
    public void setStatusMessage(String msg){
        System.out.println("DefinationGUI Class:: setStatusMessage: setting status message");
        statusMessage = msg;
    }
    
    //this function add formula item list in the choice
    //mainly this function is used to update the choice list
    public void updateChoiceList(){
        System.out.println("DefinationGUI Class:: updateChoiceList: Starting to updating choice list");
        FormulateItemChoice.removeAll();        //removing list of choice. if not multiple entry will added.
        FormulateItemChoice.add("--Select--");
        DefinationService service = new DefinationService();
        ArrayList<String> f_List = new ArrayList<>();
        f_List = service.getFormulateItemLists();
        
        for (String name : f_List) {
            FormulateItemChoice.add(name);
        }
    }
    
    //
    //this function formats the data inside the formula text area
    //first the text is converted to upper case and then cusor place in text
    //while editing or modifying character is maintained in correct position.
    //
    public void formatFormula(){        
        String formula = FormulaEditorPane.getText().replace(" ", "");
        formula = formula.toUpperCase();
        
        Integer index = null;
        if (!formula.equals(textAreaformula)){ 
            System.out.println("not equal apple man");
            
            
            char[] list1 = textAreaformula.toCharArray();
            char[] list2 = formula.toCharArray();
            
                       
            //getting the index of deleted text in the text area. eg. when back deleted text the text cursor will moved to last 
            //so to avoid this error or to make cursor in the same position using below method
            
            //The below if else returns the index number of the changed charcters
            if (list1.length>0 && list1.length<list2.length){
                for (int i=0; i<list1.length;i++){
                    if (list1[i]!=list2[i]){
                        index = i;
                        System.out.println("The index is: "+index);
                        //FormulaEditorPane.select(index, index+1);
                        break;
                    }
                }                
            } 
            else if(list1.length>0 && list1.length>list2.length){
                for (int i=0; i<list2.length;i++){
                    if (list1[i]!=list2[i]){
                        index = i;
                        System.out.println("The index is: "+index);
                        //FormulaEditorPane.select(index, index+1);
                        break;
                    }
                }
            }
            
            FormulaEditorPane.setText(formula);
            textAreaformula = formula;
            
            //if the text input in middle is not delete instead add of new text 
            //the cursor will appead before the new add character using below method to avoid this error
            
            if (index!=null && list1.length<list2.length){      //if the user input character in the middle of textfield this will avoid cursor to jump last instead of current delete position  
                FormulaEditorPane.select(index+1, index+1);
            }
            else if (index!=null){      //if the user delete in the middle of the textfield
                FormulaEditorPane.select(index, index);
            }           
        }  
    }    
   
    //this function identify if the entered items in the formula text area is valid or not
    public void checkFormulaItemValidity(){        
        String formula = FormulaEditorPane.getText();
        //String formula1 = formula.replaceAll("[\\n]+", "+\n+");
        String formula1 = formula.replace("\n", "\n+");
        
        int currentCursorPos = FormulaEditorPane.getSelectionStart();
        
        FormulaEditorPane.setText("");
        System.out.println(formula);       
        
        String[] runtimeList;
        runtimeList = formula1.split("([\\+\\*%/=-]+)");
        for (String apple:runtimeList){
            System.out.println(apple);
        }
        
        //getting uid of current formulate item.
        String fUid="";
        int a= FormulateItemChoice.getSelectedItem().indexOf("/");
        int b=0;
        if(FormulateItemChoice.getSelectedItem().endsWith(")")){
           b= FormulateItemChoice.getSelectedItem().indexOf("("); 
           fUid = FormulateItemChoice.getSelectedItem().substring(a+1, b).trim();
        }
        else{
            fUid = FormulateItemChoice.getSelectedItem().substring(a+1).trim();
        }
        
        int index = 0;
        
        for (int i=0;i<runtimeList.length;i++){ 
            System.out.println("Starting for loop");
            if(calculate_UidList.contains(runtimeList[i].replace('\n', ' ').trim())){ 
                System.out.println("String type is calculate"+runtimeList[i].replace("\n", ""));
                FormulaPaneTextColorRed(runtimeList[i],index);
                setFormulaStatus(" Valid",true);
                setFormulaStatusDetailMessage("");                
                
                //try if the math operators are present after the items/numbers.
                //if yes then change color to grey
                try{
                    int x = index+runtimeList[i].length();
                    String symbol =formula.substring(x,x+1);
                    if(symbol.matches("([\\+\\*%/=-]+)")){
                        System.out.println("chscdslapple this is cool"+symbol);
                        FormulaPaneTextColorGray(symbol,index+runtimeList[i].length());
                        index = index+1;
                    } 
                }
                catch (IndexOutOfBoundsException e){                    
                } 
                FormulaEditorPane.select(currentCursorPos, currentCursorPos);   //cursor will move according to user
            }
            else if(input_UidList.contains(runtimeList[i].replace('\n', ' ').trim())){
                System.out.println("string type is input type"+runtimeList[i].replace("\n", ""));
                FormulaPaneTextColorBlue(runtimeList[i],index);
                setFormulaStatus(" Valid",true);
                setFormulaStatusDetailMessage("");
                
                //try if the math operators are present after the items/numbers.
                //if yes then change color to grey
                try{
                    int x = index+runtimeList[i].length();
                    String symbol =formula.substring(x,x+1);
                    if(symbol.matches("([\\+\\*%/=-]+)")){
                        System.out.println("chscdslapple this is not cool"+ symbol);
                        FormulaPaneTextColorGray(String.valueOf(symbol),index+runtimeList[i].length());
                        index = index+1;
                    } 
                }
                catch (IndexOutOfBoundsException e){                    
                }
                FormulaEditorPane.select(currentCursorPos, currentCursorPos);  
            }
            else if(runtimeList[i].replace('\n', ' ').trim().matches("([\\d.]+)")){
                System.out.println("String is of number type"+runtimeList[i].replace("\n", ""));
                FormulaPaneTextColorGreen(runtimeList[i],index);
                setFormulaStatus(" Valid",true);  
                setFormulaStatusDetailMessage("");
                
                //try if the math operators are present after the items/numbers.
                //if yes then change color to grey
                try{
                    int x = index+runtimeList[i].length();
                    String symbol =formula.substring(x,x+1);
                    if(symbol.matches("([\\+\\*%/=-]+)")){
                        System.out.println("chscdslapple");
                        FormulaPaneTextColorGray(String.valueOf(symbol),index+runtimeList[i].length());
                        index = index+1;
                    } 
                }
                catch (IndexOutOfBoundsException e){                    
                } 
                FormulaEditorPane.select(currentCursorPos, currentCursorPos);  
            }
            else if(fUid.equals(runtimeList[i])){
                System.out.println("String is a formulate item"+runtimeList[i]);
                FormulaPaneTextColorM(runtimeList[i],index);
                setFormulaStatus(" Valid",true); 
                setFormulaStatusDetailMessage("");
                
                //try if the math operators are present after the items/numbers.
                //if yes then change color to grey
                try{
                    int x = index+runtimeList[i].length();
                    String symbol =formula.substring(x,x+1);
                    if(symbol.matches("([\\+\\*%/=-]+)")){
                        System.out.println("chscdslapple");
                        FormulaPaneTextColorGray(String.valueOf(symbol),index+runtimeList[i].length());
                        index = index+1;
                    }  
                }
                catch (IndexOutOfBoundsException e){                    
                } 
                FormulaEditorPane.select(currentCursorPos, currentCursorPos);  
            }
            else{               
                System.out.println("String is unknown type"+runtimeList[i].replace("\n", ""));
                FormulaPaneTextColorGray(runtimeList[i],index);
                setFormulaStatus(" Invalid",false);
                FormulaEditorPane.select(currentCursorPos, currentCursorPos);
                //if the item uid is not correct then it will be highlighted
                try{
                    //(i+1)<runtimeList.length means runtimeList[i] has other preceeding values as well and not the last value
                    if(String.valueOf(formula.charAt(runtimeList[i].length()+index)).matches("([\\+\\*%/=-]+)") && (i!=runtimeList.length-1)){                        
                        FormulaPaneTextColorGray(String.valueOf(formula.charAt(runtimeList[i].length()+index)), runtimeList[i].length()+index);                        
                        FormulaEditorPane.select(currentCursorPos, currentCursorPos);
                        index = index+1;
                    }
                    else if(String.valueOf(formula.charAt(runtimeList[i].length()+index)).matches("([\\+\\*%/=-]+)") && (i==runtimeList.length-1)){                        
                        FormulaEditorPane.select(index, index+runtimeList[i].length());                        
                        FormulaEditorPane.setSelectedTextColor(Color.gray);
                        setFormulaStatusDetailMessage("Unknown UID. The UID is not available in the list.\nCheck reference list on the left side.");
                    }
                }
                catch (IndexOutOfBoundsException e){                    
                }        
                //setting the detail of error in detail pane                
            }
            index = runtimeList[i].length()+index;
        }
        
        /*
        //checking if the final formula contains any unknown uids or not.
        String[] checklist = FormulaEditorPane.getText().split("([\\+\\*%/=-]+)");
        for(int x=0;x<checklist.length;x++){
            if (!calculate_UidList.contains(checklist[x])){
                setFormulaStatus(" Invalid",false);
                setFormulaStatusDetailMessage("Unknown UID found. Please correct the UID name.");
                break;
            } 
            else if(!input_UidList.contains(checklist[x])){
                setFormulaStatus(" Invalid",false);
                setFormulaStatusDetailMessage("Unknown UID found. Please correct the UID name.");
                break;
            }
            else{
                setFormulaStatus(" Valid",true);
                setFormulaStatusDetailMessage("");
                
            }
        }*/
    }
    
    
    //this function validates if the = is in second position or not
    // if not it will forcely replace any character with =
    public void validateFormula(){
        String formula = FormulaEditorPane.getText().replace(" ", "");
        String[] formulaRowList = formula.split("\\n");      //converting each row to an array
                
         for (int k=0; k<formulaRowList.length; k++){
             System.out.println("hellow world: "+ formulaRowList[k]);
         }
        //new variables for use in check 2
        String formattednewFormula = formula.replace("=", "=#=");
        if (formattednewFormula.startsWith("=")){
            StringBuilder stb = new StringBuilder(formula);
            stb.deleteCharAt(0);
            formattednewFormula = stb.toString();
        }
        String[] newFormulaRowList = formattednewFormula.split("\\n");      //converting each row to an array
         
        //creating string builder so that we can replace character inside string
        StringBuilder formulaText = new StringBuilder(formula);     //used 
        
        //looping through each row of formula
        for (int i=0; i<formulaRowList.length;i++){
            int charCount1 = 0;     //used in check:1
            
            //check 1: checking the first value must not be = sign
                if(formulaRowList[i].startsWith("=")){                    
                    
                    setFormulaStatus("Invalid", false);
                    setFormulaStatusDetailMessage("Invalid! Must not start with '='");
                    
                    //getting the index of first position of = in each row
                    for (int j=0; j<i;j++){
                        charCount1 = formulaRowList[j].length()+j;
                    }                        
                    int index = 0;
                    if (i==0){
                            index = 0;  //getting the index for = sign. which is the size of previous item                       
                        }
                    else{
                        //in next row, we need to add i in previous index count. eg. previous count = 10, but index start from 0 , so value will get changed in 9 position.                        //using i. because newline is also count and therefore index must be dynamic
                        index = charCount1;                        
                    }
                    formulaText.deleteCharAt(index); //return empty value in place of = sign 
                    String newText = formulaText.toString();
                    FormulaEditorPane.setText(newText);
                       
                    System.out.println("CHinnappa: son of bithc "+i+"hell"+charCount1);
                    //index = index - rowItemList[0].length();   //returning the value of index to length of first row. which will be initial index to next row.
                    //formulaText = new StringBuilder(FormulaEditorPane.getText());
                    formula = FormulaEditorPane.getText().replace(" ", "");
                    
                }
                else{
                    setFormulaStatus("Valid", true);
                    setFormulaStatusDetailMessage("");
                }           
            formulaText = new StringBuilder(formula);
                
            //check 2: checking the second item must be = sign
            String[] newRowItemList = newFormulaRowList[i].split("([\\+\\*%/=-]+)");  //converting each row inside array to another array            
            
            int rowItemListCount = newRowItemList.length;  //getting length of row itms
            System.out.println("Hellow world man of the mathc: "+rowItemListCount);
            if (rowItemListCount==2 && !formulaRowList[i].startsWith("=")){       //avoiding index out of bound since 1 in rowItemList might not applicable for all the time                
                System.out.println("Hellow world");
                if (newRowItemList[1]!="#"){                       
                    setFormulaStatus("Invalid", false);
                    setFormulaStatusDetailMessage("'=' must be present in second position.");
                    
                    //getting the index of first position of = in each row
                    int charCount2 = 0;     //used in check:2
                    
                    for (int j=0; j<i;j++){
                        charCount2 = formulaRowList[j].length()+j;      //getting the total index of previous row
                    } 
                    
                    int index = 0;
                    if (i==0){
                        index = newRowItemList[0].length();  //getting the index for = sign. which is the size of previous item
                        System.out.println("Tererrerererererer: "+index);
                    }
                    else{
                        //in next row, we need to add i in previous index count. eg. previous count = 10, but index start from 0 , so value will get changed in 9 position.                        //using i. because newline is also count and therefore index must be dynamic
                        index = newRowItemList[0].length()+ charCount2+i;                        
                    } 
                    //creating string builder so that we can replace character inside string
                   // StringBuilder newFormulaText = new StringBuilder(formula);     //used                   
                    formulaText.setCharAt(index, '=');     //replacing with =                         
                    String newText = formulaText.toString();
                    FormulaEditorPane.setText(newText);
                     
                    /*
                    //updating the color of = sign
                    formulaText = new StringBuilder(FormulaEditorPane.getText());
                    formulaText.deleteCharAt(index);
                    FormulaEditorPane.setText(formulaText.toString());
                    FormulaPaneTextColorBlue("=",index);
                    */   
                    //charCount2 = formulaRowList[i].length()+charCount2; 
                    //index = index - rowItemList[0].length();   //returning the value of index to length of first row. which will be initial index to next row.                    
                }
                else{
                    setFormulaStatus("Valid", true);
                    setFormulaStatusDetailMessage(""); 
                }
            }
        }       
    }    
    
    
    //this function sets the input status message in formula runtime status panel
    public void setFormulaStatusDetailMessage(String msg){
        FormulaStatusDetailPane.setText(msg);
    }
    
    //this function sets the input status message overview message in formula runtime status panel
    public void setFormulaStatus(String msg, boolean status){
        FormulaStatusField.setText(msg);
        if (!status){
            FormulaStatusField.setForeground(Color.red);
        }
        else{
            FormulaStatusField.setForeground(Color.blue);
        }
    }
    
    //This function sets the string color to red in formula panel
    //the text is passed via parameter
    public void FormulaPaneTextColorRed(String textName, int index){     
        
        StyleConstants.setForeground(style, Color.red);
        
        try {
            document.insertString(index, textName, style);
        } 
        catch (BadLocationException ex) {
        } 
    }
    
    //This function sets the string color to green in formula panel
    //the text is passed via parameter
    public void FormulaPaneTextColorGreen(String textName, int index){
        StyleConstants.setForeground(style, Color.green);

        try {
            document.insertString(index, textName, style);
        } 
        catch (BadLocationException e) {
        }
    }
    
    //This function sets the string color to blue in formula panel
    //the text is passed via parameter
    public void FormulaPaneTextColorBlue(String textName, int index){
        StyleConstants.setForeground(style, Color.blue);

        try {
            document.insertString(index, textName, style);
        } 
        catch (BadLocationException e) {
        }
    }
    
    public void FormulaPaneTextColorGray(String textName, int index){
        StyleConstants.setForeground(style, Color.GRAY);

        try {
            document.insertString(index, textName, style);
        } 
        catch (BadLocationException e) {
        }
    }
    
    public void FormulaPaneTextColorM(String textName, int index){
        StyleConstants.setForeground(style, Color.magenta);

        try {
            document.insertString(index, textName, style);
        } 
        catch (BadLocationException e) {
        }
    }
    
    //this method is accessed from mainPanel GUI from the show() method.
    //this method updates the status of the formula editor pane
    public void changeFormulaDefPanelStatus(String uid){
        int count = FormulateItemChoice.getItemCount();
        for(int x=0;x<count;x++){
            if(FormulateItemChoice.getItem(x).contains(uid)){
                FormulateItemChoice.select(FormulateItemChoice.getItem(x));
                AddFormulaButton.setEnabled(true); 
                FormulaEditorPane.setFocusable(true);
                FormulaEditorPane.setToolTipText("");
                FormulaEditorPane.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
                cardlayout.setBackButtonValue("mainPanelCard");
                
                break;
            }
        }       
    }
    
    //This function display list of calculate and user input items in the reference panel
    public void referenceList(){
        ArrayList<ItemBean> items = new ArrayList<>();
        items = new DefinationService().getItemsList();
        int index = 0;
        String name="";
        for(int i=0; i<items.size();i++){
            if(items.get(i).getDataType().equals("i")){                   
                name = name+items.get(i).getName()+" ("+items.get(i).getUid()+")\n";                
                index = name.length()+index+i;
                ReferenceList.setText(name);
            }
            else if (items.get(i).getDataType().equals("c")){
                name = name+items.get(i).getName()+" ("+items.get(i).getUid()+")\n";
                index = name.length()+index+i;  
                ReferenceList.setText(name);              
            }            
        }
        referenceListSetColoredText();
    }
    
    //This function sets the color of reference list items
    public void referenceListSetColoredText(){ 
        
        String[] rows = ReferenceList.getText().split("\\n");        
        ReferenceList.setText("");
        int rowCharCount =0;
        for (int i=0; i<rows.length;i++){
            int index1=rows[i].indexOf("(");
            int index2=rows[i].indexOf(")");
            
            String item = "";
            try{
            item=rows[i].substring(index1+1,index2);
            }
            catch (StringIndexOutOfBoundsException e){
            }
            //rowCharCount = row.length();
            if(calculate_UidList.contains(item)){
                StyleConstants.setForeground(style1, Color.red);
                try {
                    document1.insertString(rowCharCount, rows[i]+"\n", style1);
                } 
                catch (BadLocationException e) {
                }                
            }
            else if (input_UidList.contains(item)){
                StyleConstants.setForeground(style1, Color.blue);
                try {
                    document1.insertString(rowCharCount, rows[i]+"\n", style1);
                } 
                catch (BadLocationException e) {
                }
            }
            rowCharCount = rows[i].length()+1+rowCharCount;
        }        
    }
}
